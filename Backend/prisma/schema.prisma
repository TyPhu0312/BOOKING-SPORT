generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  role_id  String   @id @default(uuid()) @db.Char(36)
  roleName RoleName @default(Customer)

  users User[]

  @@map("role")
}

model User {
  user_id      String   @id @default(uuid()) @db.Char(36)
  username     String   @db.VarChar(30)
  passWord     String
  email        String   @unique @db.VarChar(30)
  phone_number String   @db.VarChar(10)
  create_at    DateTime @db.Date
  roleID       String   @db.Char(36)
  role         Role     @relation(fields: [roleID], references: [role_id], onDelete: Cascade, onUpdate: NoAction)

  Bank_accounts Bank_account[]
  Bookings      Booking[]
  Fields        Fields[]       @relation("UserFields")
  Reviews       Reviews[]      @relation("UserReviews")

  @@map("user")
}

model Bank_account {
  bank_id             String @id @default(uuid()) @db.Char(36)
  bank_account_number Int    @db.Int
  bank_account_name   String @db.VarChar(30)
  UserID              String @db.Char(36)
  user                User   @relation(fields: [UserID], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@map("bank_account")
}

model Payments {
  payment_id   String          @id @default(uuid()) @db.Char(36)
  total_price  Decimal
  payment_date DateTime
  method       Payments_Method @default(Cash)
  status       Payments_Status @default(Success)
  isDeposit    Boolean
  BookingID    String          @db.VarChar(36)

  booking Booking @relation(fields: [BookingID], references: [booking_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([BookingID], map: "payments_BookingID_fkey")
  @@map("payments")
}

model Booking {
  booking_id    String         @id @default(uuid()) @db.Char(36)
  booking_date  DateTime       @db.Date
  time_start    DateTime       @db.DateTime()
  time_end      DateTime       @db.DateTime()
  total_price   Decimal
  deposit       Decimal
  Status        Booking_Status @default(Pending)
  prove_payment String         @db.VarChar(30)
  UserID        String         @db.VarChar(36)
  FieldID       String         @db.VarChar(36)

  user   User   @relation(fields: [UserID], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  fields Fields @relation("FieldBookings", fields: [FieldID], references: [field_id], onDelete: Cascade, onUpdate: NoAction)

  Payments Payments[]

  @@map("booking")
}

model Category {
  category_id   String          @id @default(uuid()) @db.VarChar(36)
  category_name String          @db.VarChar(30)
  fields        Fields[]        @relation("CategoryFields")
  optionFields  Option_Fields[] @relation("CategoryOptions")

  @@map("category")
}

model Option_Fields {
  option_field_id String        @id @default(uuid()) @db.Char(36)
  option_name     String        @db.VarChar(30)
  CategoryID      String        @db.Char(36)
  category        Category      @relation("CategoryOptions", fields: [CategoryID], references: [category_id])
  fields          Field_Option[] @relation("FieldOptionFields") // Quan hệ nhiều-nhiều với Fields

  @@index([CategoryID], map: "option_fields_CategoryID_fkey")
  @@map("option_fields")
}

model Fields {
  field_id    String        @id @default(uuid()) @db.VarChar(36)
  field_name  String        @db.VarChar(30)
  half_hour   Boolean
  location    String        @db.VarChar(30)
  description String        @db.VarChar(30)
  status      Fields_status @default(Inactive)
  image_url   String        @db.VarChar(30)
  OwnerID     String        @db.VarChar(36)
  CategoryID  String        @db.VarChar(36)

  owner     User               @relation("UserFields", fields: [OwnerID], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  schedules Fields_Schedules[] @relation("FieldSchedules")
  options   Field_Option[]     @relation("FieldOptionFields") // Quan hệ nhiều-nhiều với Option_Fields
  bookings  Booking[]          @relation("FieldBookings")
  reviews   Reviews[]          @relation("FieldReviews")
  category  Category           @relation("CategoryFields", fields: [CategoryID], references: [category_id])

  @@index([CategoryID], map: "fields_CategoryID_fkey")
  @@index([OwnerID], map: "fields_OwnerID_fkey")
  @@map("fields")
}

model Field_Option {
  field_id        String       @db.Char(36)
  option_field_id String       @db.Char(36)
  field           Fields       @relation("FieldOptionFields", fields: [field_id], references: [field_id], onDelete: Cascade)
  optionField     Option_Fields @relation("FieldOptionFields", fields: [option_field_id], references: [option_field_id], onDelete: Cascade)

  @@id([field_id, option_field_id])
  @@map("field_option")
}

model Fields_Schedules {
  schedule_id String    @id @default(uuid()) @db.Char(36)
  day_of_week DayOfWeek
  open_time   DateTime?  @db.Time(0)
  close_time  DateTime?  @db.Time(0)
  FieldID     String    @db.VarChar(36)
  isClosed    Boolean  @default(false)
  field       Fields    @relation("FieldSchedules", fields: [FieldID], references: [field_id])

  @@index([FieldID], map: "fields_schedules_fieldID_fkey")
  @@map("fields_schedules")
}

model Reviews {
  review_id String   @id @default(uuid()) @db.Char(36)
  rating    Float
  comment   String   @db.VarChar(30)
  create_at DateTime
  UserID    String   @db.VarChar(36)
  FieldID   String   @db.VarChar(36)

  user  User   @relation("UserReviews", fields: [UserID], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  field Fields @relation("FieldReviews", fields: [FieldID], references: [field_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([FieldID], map: "reviews_FieldID_fkey")
  @@index([UserID], map: "reviews_UserID_fkey")
  @@map("reviews")
}

model Space_Per_Hour {
  space_per_hour_id String  @id @default(uuid()) @db.Char(36)
  from_hour_value   String  @db.VarChar(30)
  to_hour_value     String  @db.VarChar(30)
  price             Float
  FieldID           String  @db.VarChar(36)
  day_of_week       String?

  @@index([FieldID], map: "space_per_hour_FieldID_fkey")
  @@map("space_per_hour")
}

model Hours {
  hours_id        String          @id @default(uuid()) @db.VarChar(36)
  hour_value      Float
  status_hour_on  Status_Hour_on  @default(Enable)
  status_hour_off Status_Hour_off @default(Booked)
  FieldID         String          @db.VarChar(36)

  @@index([FieldID], map: "hours_FieldID_fkey")
  @@map("hours")
}

model Promotions {
  promotion_id String   @id @default(uuid()) @db.VarChar(36)
  discount     Decimal
  start_date   DateTime
  end_date     DateTime
  FieldID      String   @unique @db.VarChar(36)

  @@map("promotions")
}

enum RoleName {
  Admin
  Customer
  Owner
}

enum Payments_Method {
  Banking
  Cash
}

enum Payments_Status {
  Success
  Failed
}

enum Booking_Status {
  Pending
  Confirmed
  Cancelled
}

enum Fields_status {
  Active
  Inactive
}

enum Status_Hour_on {
  Enable
}

enum Status_Hour_off {
  Booked
  Out_of_time
}

enum DayOfWeek {
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
  Sun
}